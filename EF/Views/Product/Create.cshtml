@model EF.Models.ViewModel.Category.productToproperty

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
@using (Html.BeginForm("Create", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>product</h4>
    <hr />


    <div class="form-group">
        @Html.LabelFor(model => model.category.categoryId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <select class="form-control" name="categoryId" id="categoryId" onchange="getsubCategories()">
                <option  value="0" selected>Bir Kategori seçin</option>

                @foreach (var item in ViewBag.categories)
                {
                    <option value="@item.Value">@item.Text</option>
                }
            </select>

            @Html.ValidationMessageFor(model => model.category.categoryId, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group"id="subCat">
        @Html.LabelFor(model => model.category.categoryId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <select class="form-control" name="subCategoryId" id="subCategoryId" onchange="getProperties()">
                <option selected>Bir Alt Kategori seçin</option>

            </select>

            @Html.ValidationMessageFor(model => model.category.categoryId, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.product.brandId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <select class="form-control" name="brandId">
                <option selected>Bir Kategori seçin</option>

                @foreach (var item in ViewBag.brands)
                {
                    <option value="@item.brandId">@item.brandName</option>
                }
            </select>

            @Html.ValidationMessageFor(model => model.product.brandId, "", new { @class = "text-danger" })
        </div>
    </div>


    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.product.productName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.product.productName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.product.productName, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.product.stock, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.product.stock, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.product.stock, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.product.price, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.product.price, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.product.price, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.product.productDesc, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.product.productDesc, new { htmlAttributes = new { @class = "form-control",id= "productDesc" } })
            @Html.ValidationMessageFor(model => model.product.productDesc, "", new { @class = "text-danger" })
            
            
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.product.discount, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.product.discount, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.product.discount, "", new { @class = "text-danger" })
        </div>
    </div>
    <div id="properties">

    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.product.images, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <input type="file" name="img" multiple="multiple" />
            @Html.ValidationMessageFor(model => model.product.images, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {

        // get properties
        getProperties = function () {
            $.ajax({
                url: "/Category/getProperties",
                data: { Id: $("#subCategoryId").val() },
                success: function (response) {
                    if (response != 0) {
                        $.each(response, function (i, data) {
                            $("div#properties").append('<div class="form-group"><label class="control-label col-md-2">' + data.propertyName + '</label><div class="col-md-10"><input type="text" id="propertyValues[' + i + '].propertyId" name="propertyValues[' + i + '].propertyId" value="' + data.propertyId + '" /><input type="' + data.propertyType + '" class="form-control" name="propertyValues[' + i + '].ValueName" id="propertyValues[' + i + '].ValueName" /></div></div>');
                        });
                    }
                    else
                        $("div#properties").empty();
                }
            });
        }


        $("div#subCat").hide();
        getsubCategories = function () {
            //alert($("#categoryId").val());
            $.ajax({
                url: "/Category/getsubCategories",
                data: { Id: $("#categoryId").val() },
                success: function (response) {
                    if (response!=0) {
                        $("div#subCat").show();
                        $("div#subCat select").empty();
                        $.each(response, function (i, data) {
                           // alert(JSON.stringify(data));
                            $("div#subCat select").append(
                                $('<option></option>').val(data.categoryId).html(data.categoryName)
                            );
                        });
                    }
                    else  {
                        $("div#subCat").hide();
                    }
                }
            });
            // get properties
            $.ajax({
                url: "/Category/getProperties",
                data: { Id: $("#categoryId").val() },
                success: function (response) {
                    if (response != 0) {
                        $.each(response, function (i, data) {
                            $("div#properties").append('<div class="form-group"><label class="control-label col-md-2">' + data.propertyName + '</label><div class="col-md-10"><input type="text" id="propertyValues[' + i + '].propertyId" name="propertyValues[' + i + '].propertyId" value="' + data.propertyId + '" /><input type="' + data.propertyType + '" class="form-control" name="propertyValues[' + i + '].ValueName" id="propertyValues[' + i + '].ValueName" /></div></div>');
                        });
                    }
                    else
                        $("div#properties").empty();
                }
            });
        }
    });

</script>